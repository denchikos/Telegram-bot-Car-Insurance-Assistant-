import logging
import os
import random
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
import google.generativeai as genai

# === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ú–Ü–ù–ù–ò–• ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")


# === –õ–û–ì–Ü ===
logging.basicConfig(level=logging.INFO)

# === –°–¢–ê–ù–ò ===
PASSPORT, CAR_DOC, CONFIRMATION, PRICE_CONFIRM = range(4)

# === –ù–ê–°–¢–†–û–ô–ö–ê GEMINI ===
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
model = genai.GenerativeModel('models/gemini-1.5-flash')


# === MOCK-–î–ê–ù–Ü ===
user_data = {}
NAMES = ["–û–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ú–∞—Ä—ñ—è", "–Ü–≤–∞–Ω", "–ê–Ω–¥—Ä—ñ–π", "–ö–∞—Ç–µ—Ä–∏–Ω–∞"]
SURNAMES = ["–ü–µ—Ç—Ä–µ–Ω–∫–æ", "–Ü–≤–∞–Ω–æ–≤", "–ö–æ–≤–∞–ª—å", "–ú–µ–ª—å–Ω–∏–∫", "–®–µ–≤—á–µ–Ω–∫–æ"]
MODELS = ["Golf", "Focus", "Civic", "Octavia", "Passat"]
BRANDS = ["Volkswagen", "Ford", "Honda", "Skoda", "Toyota"]


# === –§–£–ù–ö–¶–Ü–Ø –í–Ü–î–ü–û–í–Ü–î–Ü –í–Ü–î GEMINI ===
async def ask_gemini(prompt: str) -> str:
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print("Gemini error:", type(e).__name__, "-", e)
        return "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ üò•"


# === –Ü–ú–Ü–¢–ê–¶–Ü–Ø MIND–ïE API ===
def mock_extract_data(document_type: str, user_id: int) -> dict:
    random.seed(user_id)
    if document_type == "passport":
        return {
            "–Ü–º º—è": random.choice(NAMES),
            "–ü—Ä—ñ–∑–≤–∏—â–µ": random.choice(SURNAMES),
            "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞": f"AA{random.randint(100000, 999999)}"
        }
    elif document_type == "car_doc":
        vin = "WVW" + "".join(random.choices("ABCDEFGHJKLMNPRSTUVWXYZ0123456789", k=14))
        return {
            "VIN": vin,
            "–ú–∞—Ä–∫–∞": random.choice(BRANDS),
            "–ú–æ–¥–µ–ª—å": random.choice(MODELS)
        }


# === –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ü–û–õ–Ü–°–£ ===
def generate_policy_file(user_id: int, passport_data: dict, car_data: dict) -> str:
    date_today = datetime.now().strftime("%Y-%m-%d")
    policy_number = f"PL-{random.randint(100000, 999999)}"
    content = (
        f"–°–¢–†–ê–•–û–í–ò–ô –ü–û–õ–Ü–° ‚Ññ {policy_number}\n"
        f"–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: {date_today}\n\n"
        f"üë§ –í–ª–∞—Å–Ω–∏–∫:\n"
        f"–Ü–º º—è: {passport_data['–Ü–º º—è']}\n"
        f"–ü—Ä—ñ–∑–≤–∏—â–µ: {passport_data['–ü—Ä—ñ–∑–≤–∏—â–µ']}\n"
        f"–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {passport_data['–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞']}\n\n"
        f"üöó –ê–≤—Ç–æ–º–æ–±—ñ–ª—å:\n"
        f"–ú–∞—Ä–∫–∞: {car_data['–ú–∞—Ä–∫–∞']}\n"
        f"–ú–æ–¥–µ–ª—å: {car_data['–ú–æ–¥–µ–ª—å']}\n"
        f"VIN: {car_data['VIN']}\n\n"
        f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: 100 USD\n"
        f"üîí –ü–æ–ª—ñ—Å –¥—ñ–π—Å–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º 1 —Ä–æ–∫—É\n"
    )
    filename = f"temp/policy_{user_id}.txt"
    with open(filename, "w", encoding="utf-8") as file:
        file.write(content)
    return filename


# === /START ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = await ask_gemini("–ü—Ä–∏–≤—ñ—Ç–∞–π—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —ñ –ø–æ–ø—Ä–æ—Å–∏ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.")
    await update.message.reply_text(msg)
    return PASSPORT


# === –û–ë–†–û–ë–ö–ê –ü–ê–°–ü–û–†–¢–ê ===
async def handle_passport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    passport_path = f"temp/{user_id}_passport.jpg"
    await file.download_to_drive(passport_path)
    user_data[user_id] = {"passport": passport_path}

    msg = await ask_gemini("–ü–æ–¥—è–∫—É–π –∑–∞ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —ñ –ø–æ–ø—Ä–æ—Å–∏ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞.")
    await update.message.reply_text(msg)
    return CAR_DOC


# === –û–ë–†–û–ë–ö–ê –¢–ï–•–ü–ê–°–ü–û–†–¢–ê ===
async def handle_car_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    car_doc_path = f"temp/{user_id}_car_doc.jpg"
    await file.download_to_drive(car_doc_path)
    user_data[user_id]["car_doc"] = car_doc_path

    passport_data = mock_extract_data("passport", user_id)
    car_data = mock_extract_data("car_doc", user_id)
    user_data[user_id]["passport_data"] = passport_data
    user_data[user_id]["car_data"] = car_data

    result = "üìÑ –ú–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–ª–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ:\n\n"
    result += "\n".join([f"{k}: {v}" for k, v in passport_data.items()])
    result += "\n\nüöó –î–∞–Ω—ñ –∞–≤—Ç–æ:\n"
    result += "\n".join([f"{k}: {v}" for k, v in car_data.items()])
    result += "\n\n–ß–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? (–¢–∞–∫ / –ù—ñ)"

    await update.message.reply_text(result)
    return CONFIRMATION


# === –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• ===
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text == "—Ç–∞–∫":
        msg = await ask_gemini("–°–∫–∞–∂–∏, —â–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ 100 –¥–æ–ª–∞—Ä—ñ–≤ —ñ –∑–∞–ø–∏—Ç–∞–π —á–∏ –∑–≥–æ–¥–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.")
        await update.message.reply_text(msg)
        return PRICE_CONFIRM
    elif text == "–Ω—ñ":
        msg = await ask_gemini("–ü–æ–ø—Ä–æ—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–µ —Ä–∞–∑ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.")
        await update.message.reply_text(msg)
        return PASSPORT
    else:
        return CONFIRMATION


# === –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –¶–Ü–ù–ò ===
async def handle_price_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.lower()

    if text == "—Ç–∞–∫":
        await update.message.reply_text(await ask_gemini("–ü–æ–¥—è–∫—É–π –∑–∞ –∑–≥–æ–¥—É —ñ —Å–∫–∞–∂–∏, —â–æ –∑–∞—Ä–∞–∑ –±—É–¥–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—ñ—Å."))

        passport_data = user_data[user_id]["passport_data"]
        car_data = user_data[user_id]["car_data"]
        policy_path = generate_policy_file(user_id, passport_data, car_data)

        await update.message.reply_document(
            document=open(policy_path, "rb"),
            filename=f"insurance_policy_{user_id}.txt",
            caption="–û—Å—å –≤–∞—à —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è! ‚úÖ"
        )
        return ConversationHandler.END

    elif text == "–Ω—ñ":
        await update.message.reply_text(
            await ask_gemini("–ü–æ—è—Å–Ω–∏, —â–æ 100 USD ‚Äî —Ü–µ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞, —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –ø—ñ–∑–Ω—ñ—à–µ."))
        return ConversationHandler.END

    else:
        return PRICE_CONFIRM


# === MAIN ===
def main():
    if not os.path.exists("temp"):
        os.makedirs("temp")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PASSPORT: [MessageHandler(filters.PHOTO, handle_passport)],
            CAR_DOC: [MessageHandler(filters.PHOTO, handle_car_doc)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirmation)],
            PRICE_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price_confirmation)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == "__main__":
    main()